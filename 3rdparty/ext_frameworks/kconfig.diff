diff --git a/autotests/kconfig_compiler/test4main.cpp b/autotests/kconfig_compiler/test4main.cpp
index b4569ba..1e1f017 100644
--- a/autotests/kconfig_compiler/test4main.cpp
+++ b/autotests/kconfig_compiler/test4main.cpp
@@ -34,7 +34,7 @@ int main(int argc, char **argv)
         group.writeEntry(QLatin1String("foo bar"), QStringLiteral("Value"));
     }
     Test4 *t = Test4::self();
-    bool ok = QFile::exists(QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) + "/test4rc");
+    bool ok = QFile::exists(QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation) + "/test4rc");
     if (!ok) {
         qWarning() << "config file was not created!";
     }
diff --git a/autotests/kconfignokdehometest.cpp b/autotests/kconfignokdehometest.cpp
index d9712ee..b393361 100644
--- a/autotests/kconfignokdehometest.cpp
+++ b/autotests/kconfignokdehometest.cpp
@@ -37,7 +37,7 @@ private Q_SLOTS:
 void KConfigNoKdeHomeTest::testNoKdeHome()
 {
     QStandardPaths::setTestModeEnabled(true);
-    QString configPath = QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation);
+    QString configPath = QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation);
     QDir configDir(configPath);
     QVERIFY(configDir.removeRecursively());
     QVERIFY(!QFile::exists(configPath));
diff --git a/autotests/kconfigskeletontest.cpp b/autotests/kconfigskeletontest.cpp
index 898366c..e39b488 100644
--- a/autotests/kconfigskeletontest.cpp
+++ b/autotests/kconfigskeletontest.cpp
@@ -37,7 +37,7 @@ QTEST_MAIN(KConfigSkeletonTest)
 
 void KConfigSkeletonTest::init()
 {
-    QFile::remove(QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) + "/kconfigskeletontestrc");
+    QFile::remove(QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation) + "/kconfigskeletontestrc");
     s = new KConfigSkeleton("kconfigskeletontestrc");
     s->setCurrentGroup("MyGroup");
     itemBool = s->addItemBool("MySetting1", mMyBool, DEFAULT_SETTING1);
diff --git a/autotests/kconfigtest.cpp b/autotests/kconfigtest.cpp
index e92197f..b64535a 100644
--- a/autotests/kconfigtest.cpp
+++ b/autotests/kconfigtest.cpp
@@ -80,7 +80,7 @@ QTEST_MAIN(KConfigTest)
 #define TEST_SUBDIR "kconfigtest_subdir/"
 
 static inline QString testConfigDir() {
-    return QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) + "/" TEST_SUBDIR;
+    return QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation) + "/" TEST_SUBDIR;
 }
 
 static inline QString kdeGlobalsPath() {
@@ -263,7 +263,7 @@ static QList<QByteArray> readLinesFrom(const QString &path)
 
 static QList<QByteArray> readLines(const char *fileName = TEST_SUBDIR "kconfigtest")
 {
-    const QString path = QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation);
+    const QString path = QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation);
     Q_ASSERT(!path.isEmpty());
     return readLinesFrom(path + '/' + fileName);
 }
@@ -315,7 +315,7 @@ void KConfigTest::testRevertAllEntries()
 void KConfigTest::testSimple()
 {
     // kdeglobals (which was created in initTestCase) must be found this way:
-    const QStringList kdeglobals = QStandardPaths::locateAll(QStandardPaths::GenericConfigLocation, QLatin1String("kdeglobals"));
+    const QStringList kdeglobals = QStandardPaths::locateAll(QStandardPaths::AppConfigLocation, QLatin1String("kdeglobals"));
     QVERIFY(!kdeglobals.isEmpty());
 
     KConfig sc2(TEST_SUBDIR "kconfigtest");
@@ -383,7 +383,7 @@ void KConfigTest::testDefaults()
     group.writeEntry("entry2", Value2);
     QVERIFY(group.sync());
 
-    config.addConfigSources(QStringList() << QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) + '/' + defaultsFile);
+    config.addConfigSources(QStringList() << QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation) + '/' + defaultsFile);
 
     config.setReadDefaults(true);
     QCOMPARE(group.readEntry("entry1", QString()), Default);
@@ -405,7 +405,7 @@ void KConfigTest::testDefaults()
 
     // Check that everything is OK on disk, too
     KConfig reader(TEST_SUBDIR "defaulttest", KConfig::NoGlobals);
-    reader.addConfigSources(QStringList() << QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) + '/' + defaultsFile);
+    reader.addConfigSources(QStringList() << QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation) + '/' + defaultsFile);
     KConfigGroup readerGroup = reader.group("any group");
     QCOMPARE(readerGroup.readEntry("entry1", QString()), Default);
     QCOMPARE(readerGroup.readEntry("entry2", QString()), QString());
diff --git a/autotests/kdesktopfiletest.cpp b/autotests/kdesktopfiletest.cpp
index a90faf3..f752960 100644
--- a/autotests/kdesktopfiletest.cpp
+++ b/autotests/kdesktopfiletest.cpp
@@ -199,7 +199,7 @@ void KDesktopFileTest::testIsAuthorizedDesktopFile()
         qWarning("Skipping test for http_cache_cleaner.desktop, not found. kio not installed?");
     }
 
-    const QString autostartFile = QStandardPaths::locate(QStandardPaths::GenericConfigLocation, QStringLiteral("autostart/plasma-desktop.desktop"));
+    const QString autostartFile = QStandardPaths::locate(QStandardPaths::AppConfigLocation, QStringLiteral("autostart/plasma-desktop.desktop"));
     if (!autostartFile.isEmpty()) {
         QVERIFY(KDesktopFile::isAuthorizedDesktopFile(autostartFile));
     } else {
diff --git a/autotests/ksharedconfigtest.cpp b/autotests/ksharedconfigtest.cpp
index ae3d40a..7228629 100644
--- a/autotests/ksharedconfigtest.cpp
+++ b/autotests/ksharedconfigtest.cpp
@@ -39,7 +39,7 @@ void KSharedConfigTest::initTestCase()
 {
     QStandardPaths::enableTestMode(true);
 
-    m_path = QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation)
+    m_path = QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation)
             + QLatin1Char('/') + QCoreApplication::applicationName() + QStringLiteral("rc");
     QFile::remove(m_path);
 }
diff --git a/autotests/test_kconf_update.cpp b/autotests/test_kconf_update.cpp
index 4180619..40d2f41 100644
--- a/autotests/test_kconf_update.cpp
+++ b/autotests/test_kconf_update.cpp
@@ -330,8 +330,8 @@ void TestKConfUpdate::test()
     if (useVersion5)
         updContent.prepend("Version=5\n");
 
-    QString oldConfPath = QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) + QLatin1Char('/') + oldConfName;
-    QString newConfPath = QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) + QLatin1Char('/') + newConfName;
+    QString oldConfPath = QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation) + QLatin1Char('/') + oldConfName;
+    QString newConfPath = QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation) + QLatin1Char('/') + newConfName;
 
     QFile::remove(oldConfPath);
     QFile::remove(newConfPath);
@@ -631,7 +631,7 @@ void TestKConfUpdate::testScript()
     writeFile(scriptPath, updScript);
     QCOMPARE(readFile(scriptPath), updScript);
 
-    QString confPath = QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) + QLatin1Char('/') + "testrc";
+    QString confPath = QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation) + QLatin1Char('/') + "testrc";
     writeFile(confPath, oldConfContent);
     QCOMPARE(readFile(confPath), oldConfContent);
 
diff --git a/src/core/kconfig.cpp b/src/core/kconfig.cpp
index 07fa6f5..c3fc16d 100644
--- a/src/core/kconfig.cpp
+++ b/src/core/kconfig.cpp
@@ -66,7 +66,7 @@ KConfigPrivate::KConfigPrivate(KConfig::OpenFlags flags,
       bFileImmutable(false), bForceGlobal(false), bSuppressGlobal(false),
       configState(KConfigBase::NoAccess)
 {
-    sGlobalFileName = QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) + QLatin1String("/kdeglobals");
+    sGlobalFileName = QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation) + QLatin1String("/kdeglobals");
 
     static QBasicAtomicInt use_etc_kderc = Q_BASIC_ATOMIC_INITIALIZER(-1);
     if (use_etc_kderc.load() < 0) {
@@ -582,7 +582,7 @@ void KConfigPrivate::changeFileName(const QString &name)
             fileName = KConfig::mainConfigName();
             file = QStandardPaths::writableLocation(resourceType) + QLatin1Char('/') + fileName;
         } else if (wantGlobals()) { // accessing "kdeglobals" by specifying no filename and NoCascade - XXX used anywhere?
-            resourceType = QStandardPaths::GenericConfigLocation;
+            resourceType = QStandardPaths::AppConfigLocation;
             fileName = QStringLiteral("kdeglobals");
             file = sGlobalFileName;
         } else {
@@ -650,8 +650,8 @@ QStringList KConfigPrivate::getGlobalFiles() const
 {
     QMutexLocker locker(&s_globalFilesMutex);
     if (s_globalFiles()->isEmpty()) {
-        const QStringList paths1 = QStandardPaths::locateAll(QStandardPaths::GenericConfigLocation, QStringLiteral("kdeglobals"));
-        const QStringList paths2 = QStandardPaths::locateAll(QStandardPaths::GenericConfigLocation, QStringLiteral("system.kdeglobals"));
+        const QStringList paths1 = QStandardPaths::locateAll(QStandardPaths::AppConfigLocation, QStringLiteral("kdeglobals"));
+        const QStringList paths2 = QStandardPaths::locateAll(QStandardPaths::AppConfigLocation, QStringLiteral("system.kdeglobals"));
 
         const bool useEtcKderc = !etc_kderc.isEmpty();
         s_globalFiles()->reserve(paths1.size() + paths2.size() + (useEtcKderc ? 1 : 0));
diff --git a/src/core/kconfig.h b/src/core/kconfig.h
index 6cc7323..30a1e52 100644
--- a/src/core/kconfig.h
+++ b/src/core/kconfig.h
@@ -128,7 +128,7 @@ public:
      * @sa KSharedConfig::openConfig(const QString&, OpenFlags, QStandardPaths::StandardLocation)
      */
     explicit KConfig(const QString &file = QString(), OpenFlags mode = FullConfig,
-                     QStandardPaths::StandardLocation type = QStandardPaths::GenericConfigLocation);
+                     QStandardPaths::StandardLocation type = QStandardPaths::AppConfigLocation);
 
     /**
      * @internal
@@ -142,7 +142,7 @@ public:
      *
      * @since 4.1
      */
-    KConfig(const QString &file, const QString &backend, QStandardPaths::StandardLocation type = QStandardPaths::GenericConfigLocation);
+    KConfig(const QString &file, const QString &backend, QStandardPaths::StandardLocation type = QStandardPaths::AppConfigLocation);
 
     virtual ~KConfig();
 
diff --git a/src/core/kdesktopfile.cpp b/src/core/kdesktopfile.cpp
index eda7c29..8d14189 100644
--- a/src/core/kdesktopfile.cpp
+++ b/src/core/kdesktopfile.cpp
@@ -81,10 +81,10 @@ QString KDesktopFile::locateLocal(const QString &path)
     QString relativePath;
     QChar plus(QLatin1Char('/'));
     // Relative to config? (e.g. for autostart)
-    Q_FOREACH (const QString &dir, QStandardPaths::standardLocations(QStandardPaths::GenericConfigLocation)) {
+    Q_FOREACH (const QString &dir, QStandardPaths::standardLocations(QStandardPaths::AppConfigLocation)) {
         if (path.startsWith(dir + plus)) {
             relativePath = dir.mid(path.length() + 1);
-            return QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) + QLatin1Char('/') + relativePath;
+            return QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation) + QLatin1Char('/') + relativePath;
         }
     }
     // Relative to xdg data dir? (much more common)
@@ -143,7 +143,7 @@ bool KDesktopFile::isAuthorizedDesktopFile(const QString &path)
         }
     }
     const QString autostartDir = QStringLiteral("autostart/");
-    Q_FOREACH (const QString &xdgDataPrefix, QStandardPaths::standardLocations(QStandardPaths::GenericConfigLocation)) {
+    Q_FOREACH (const QString &xdgDataPrefix, QStandardPaths::standardLocations(QStandardPaths::AppConfigLocation)) {
         if (QDir(xdgDataPrefix).exists()) {
             const QString prefix = QFileInfo(xdgDataPrefix).canonicalFilePath();
             if (realPath.startsWith(prefix + QLatin1Char('/') + autostartDir, sensitivity)) {
diff --git a/src/core/kdesktopfile.h b/src/core/kdesktopfile.h
index f3b293f..990465a 100644
--- a/src/core/kdesktopfile.h
+++ b/src/core/kdesktopfile.h
@@ -45,7 +45,7 @@ public:
      *
      * @param resourceType   Allows you to change what sort of resource
      *                       to search for if @p fileName is not absolute.
-     *                       For instance, you might want to specify GenericConfigLocation.
+     *                       For instance, you might want to specify AppConfigLocation.
      * @param fileName       The name or path of the desktop file. If it
      *                       is not absolute, it will be located
      *                       using the resource type @p resType.
diff --git a/src/core/ksharedconfig.cpp b/src/core/ksharedconfig.cpp
index 8eb1308..b0e3c1c 100644
--- a/src/core/ksharedconfig.cpp
+++ b/src/core/ksharedconfig.cpp
@@ -102,7 +102,7 @@ KSharedConfigPtr KSharedConfig::openConfig(const QString &_fileName,
 
     KSharedConfigPtr ptr(new KSharedConfig(fileName, flags, resType));
 
-    if (_fileName.isEmpty() && flags == FullConfig && resType == QStandardPaths::GenericConfigLocation) {
+    if (_fileName.isEmpty() && flags == FullConfig && resType == QStandardPaths::AppConfigLocation) {
         list->mainConfig = ptr;
 
         const bool isMainThread = !qApp || QThread::currentThread() == qApp->thread();
diff --git a/src/core/ksharedconfig.h b/src/core/ksharedconfig.h
index 2d08379..804d4b8 100644
--- a/src/core/ksharedconfig.h
+++ b/src/core/ksharedconfig.h
@@ -73,7 +73,7 @@ public:
      */
     static KSharedConfig::Ptr openConfig(const QString &fileName = QString(),
                                          OpenFlags mode = FullConfig,
-                                         QStandardPaths::StandardLocation type = QStandardPaths::GenericConfigLocation);
+                                         QStandardPaths::StandardLocation type = QStandardPaths::AppConfigLocation);
 
     virtual ~KSharedConfig();
 
diff --git a/src/kconf_update/kconf_update.cpp b/src/kconf_update/kconf_update.cpp
index 9567c2d..ca5f824 100644
--- a/src/kconf_update/kconf_update.cpp
+++ b/src/kconf_update/kconf_update.cpp
@@ -447,7 +447,7 @@ void KonfUpdate::gotFile(const QString &_file)
         delete m_oldConfig2;
         m_oldConfig2 = Q_NULLPTR;
 
-        QString file = QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) + QLatin1Char('/') + m_oldFile;
+        QString file = QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation) + QLatin1Char('/') + m_oldFile;
         QFileInfo info(file);
         if (info.exists() && info.size() == 0) {
             // Delete empty file.
